name: unit-tests

on:
  push:
    branches: [ issue2419 ]

  pull_request:
    # By default: opened, synchronize, or reopened.
    branches: [ issue2419 ]

env:
  BUILD_TYPE: Debug

  # Refs for 2203_sprint.
  THUNDER_REF: "R2-v1.9"
  INTERFACES_REF: "4ec7c6f8e14b152143a105a41f4c62b6723372c4"

  THUNDER_BINDING: "127.0.0.1"
  THUNDER_PORT: "55555"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - run: pip install jsonref

      - name: Set up CMake
        # To support flow control commands to be overridden.
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.16.x'

      - name: Install packages
        run: >
          sudo apt-get install -y
          libsqlite3-dev libcurl4-openssl-dev

      - name: Checkout Thunder
        uses: actions/checkout@v3
        with:
          repository: rdkcentral/Thunder
          path: Thunder
          ref: ${{env.THUNDER_REF}}

      - name: Configure ThunderTools
        run: >
          cmake
          -S "${{github.workspace}}/Thunder/Tools"
          -B build/ThunderTools
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DGENERIC_CMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"

      - name: Build ThunderTools
        run: >
          cmake
          --build build/ThunderTools

      - name: Install ThunderTools
        run: >
          cmake
          --install build/ThunderTools

      - name: Configure Thunder
        run: >
          cmake
          -S "${{github.workspace}}/Thunder"
          -B build/Thunder
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DBUILD_TYPE=${{env.BUILD_TYPE}}
          -DBINDING=${{env.THUNDER_BINDING}}
          -DPORT=${{env.THUNDER_PORT}}

      - name: Build Thunder
        run: >
          cmake
          --build build/Thunder

      - name: Install Thunder
        run: >
          cmake
          --install build/Thunder

      - name: Checkout ThunderInterfaces
        uses: actions/checkout@v3
        with:
          repository: rdkcentral/ThunderInterfaces
          path: ThunderInterfaces
          ref: ${{env.INTERFACES_REF}}

      - name: Configure ThunderInterfaces
        run: >
          cmake
          -S "${{github.workspace}}/ThunderInterfaces"
          -B build/ThunderInterfaces
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"

      - name: Build ThunderInterfaces
        run: >
          cmake
          --build build/ThunderInterfaces

      - name: Install ThunderInterfaces
        run: >
          cmake
          --install build/ThunderInterfaces

      - name: Checkout rdkservices
        uses: actions/checkout@v3
        with:
          path: rdkservices

      - name: Configure rdkservices
        run: >
          cmake
          -S "${{github.workspace}}/rdkservices"
          -B build/rdkservices
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/tools/cmake"
          -DCMAKE_CXX_FLAGS="-I ${{github.workspace}}/rdkservices/RdkServicesTest/Include --coverage -Wall -Werror -Wno-unused-parameter -Wno-unused-result"
          -DCOMCAST_CONFIG=OFF
          -DPLUGIN_DATACAPTURE=ON
          -DPLUGIN_DEVICEDIAGNOSTICS=ON
          -DPLUGIN_LOCATIONSYNC=ON
          -DPLUGIN_PERSISTENTSTORE=ON
          -DPLUGIN_SECURITYAGENT=ON
          -DPLUGIN_DEVICEIDENTIFICATION=ON
          -DBUILD_REALTEK=ON
          -DPLUGIN_FRAMERATE=ON
          -DCMAKE_DISABLE_FIND_PACKAGE_DS=ON
          -DCMAKE_DISABLE_FIND_PACKAGE_IARMBus=ON
          -DPLUGIN_AVINPUT=ON
          -DRDK_SERVICES_TEST=ON
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build rdkservices
        run: >
          cmake
          --build build/rdkservices

      - name: Install rdkservices
        run: >
          cmake
          --install build/rdkservices

      - name: Install valgrind
        run: >
          sudo apt-get install -y
          valgrind

      - name: Start servers
        run: |
          python rdkservices/RdkServicesTest/Scripts/DeviceDiagnosticMock.py &
          sleep 0.1

      - name: Run unit tests
        run: >
          PATH=${{github.workspace}}/install/usr/bin:${PATH}
          LD_LIBRARY_PATH=${{github.workspace}}/install/usr/lib:${{github.workspace}}/install/usr/lib/wpeframework/plugins:${LD_LIBRARY_PATH}
          valgrind
          --tool=memcheck
          --log-file=valgrind_log
          --leak-check=yes
          --show-reachable=yes
          --track-fds=yes
          --fair-sched=try
          RdkServicesTest

      - name: Stop servers
        run: |
          pkill -f rdkservices/RdkServicesTest/Scripts/DeviceDiagnosticMock.py

      - name: Install lcov
        run: >
          sudo apt-get install -y
          lcov

      - name: Generate coverage
        run: >
          lcov -c
          -o coverage.info
          -d build/rdkservices

      - name: Filter coverage
        run: >
          lcov
          -r coverage.info
          '/usr/include/*'
          '*/build/rdkservices/_deps/*'
          '*/install/usr/include/*'
          -o filtered_coverage.info

      - name: Generate HTML
        run: >
          genhtml
          -o coverage
          -t "rdkservices coverage"
          filtered_coverage.info

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            coverage/
            valgrind_log
